#fileLoader
#loads in and creates objects from a file definition generated by rfid readers

import os, importlib, imp
import classes

class FileLoader():
    def __init__(self):
        pass

    def loadFromFile(self, fileLocation, teamName, console):
        '''
        creates avatar objects based on file definitions
        '''
        avatarList = []

        file = open(fileLocation, 'r')

        fileData = file.readlines()

        #print fileData

        for entry in fileData:
            if entry == '# \n' or entry == '#\n':
                fileData.remove(entry)
        #print fileData

        indexList = []
        for entry in fileData:
            #print entry
            if entry.startswith('#') or entry.startswith(' ') or entry.startswith('\n'):
                index =  fileData.index(entry)
                #print index
                indexList.append(index)

               # print fileData

        #print indexList

        i = 0
        for num in indexList:
            locator = num + i
            if locator < 0:
                locator = 0
            #print 'deleting:' + fileData[num + i] + ' at index:' + str(num+i)
            del fileData[locator]

            #print fileData
            #print ''
            i -= 1

        if len(fileData) > 6:
            fileData = fileData[:6]

        for entry in fileData:
            newAvatar = classes.Avatar(entry, teamName, console)
            avatarList.append(newAvatar)

        return avatarList


    def loadWeaponModules(self, directory):
        '''
        loads all of the weapons defined by the weapon modules into the world
        '''

        fileList = os.listdir(directory)

        weaponDict = {}

        for weapon in fileList:
            if weapon.endswith('.py'):
                weapon = weapon[:-3]
            elif weapon.endswith('.pyc'):
                weapon = weapon[:-4]


            weaponFile = imp.find_module(weapon, [directory])
            weaponModule = imp.load_module(weapon, weaponFile[0], weaponFile[1], ('.py', 'r', imp.PY_SOURCE) )
            weaponDict[weapon] = weaponModule

        return weaponDict



